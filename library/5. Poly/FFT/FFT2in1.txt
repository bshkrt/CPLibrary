using ll = long long;

constexpr int FFT_LG = 20, FFT_N = 1 << FFT_LG;
const double PI = acos(-1);

complex<double> roots[FFT_N];

void init_roots() {
    for (int i = 0; i < FFT_N / 2; ++i) {
        auto alp = 2 * PI * i / FFT_N;
        roots[i + FFT_N / 2] = {cos(alp), sin(alp)};
    }
    for (int i = FFT_N / 2 - 1; i > -1; --i) {
        roots[i] = roots[i << 1];
    }
}

vector<int> rev;

void dft(vector<complex<double>> &a) {
    int n = (int) a.size();
    if (n == 1) return;

    if ((int) rev.size() != n) {
        int k = __builtin_ctz(n) - 1;
        rev.resize(n);
        for (int i = 0; i < n; ++i) {
            rev[i] = rev[i >> 1] >> 1 | (i & 1) << k;
        }
    }

    for (int i = 0; i < n; ++i) {
        if (rev[i] < i) {
            swap(a[rev[i]], a[i]);
        }
    }

    for (int k = 1; k < n; k <<= 1) {
        for (int i = 0; i < n; i += k << 1) {
            for (int j = 0; j < k; ++j) {
                auto u = a[i + j], v = a[i + j + k] * roots[k + j];
                a[i + j] = u + v;
                a[i + j + k] = u - v;
            }
        }
    }
}

vector<ll> mul(vector<int> &a, vector<int> &b) {
    if (a.empty() || b.empty()) {
        return {};
    }
    int sz = 1, tot = int(a.size() + b.size() - 1);
    while (sz < tot) sz <<= 1;

    vector<complex<double>> f(sz), g(sz);
    for (int i = 0; i < (int) a.size(); ++i) f[i].real(a[i]);
    for (int i = 0; i < (int) b.size(); ++i) f[i].imag(b[i]);

    dft(f);
    for (int i = 0; i < sz; ++i) {
        int j = i ? sz - i : i;
        g[i] = (f[j] * f[j] - conj(f[i] * f[i])) * complex<double>{0, -0.25 / sz};
    }
    dft(g);
    vector<ll> ans(tot);
    for (int i = 0; i < tot; ++i) {
        ans[i] = round(g[i].real());
    }
    return ans;
}