template<typename T>
struct Fenwick {
    vector<vector<T>> t;
    vector<vector<int>> yy;
    int n;


    Fenwick() = default;

    Fenwick(int a) {
        init(a);
    }

    void init(int a) {
        n = a;
        yy.assign(n, {});
        t.assign(n, {});
    }

    void fake_add(int x, int y) {
        assert(x >= 0);
        for (int i = x; i < n; i |= (i + 1))
            yy[i].push_back(y);
    }

    void build() {
        for (int i = 0; i < n; ++i) {
            sort(yy[i].begin(), yy[i].end());
            yy[i].erase(unique(yy[i].begin(), yy[i].end()), yy[i].end());
            t[i].assign(yy[i].size() + 2, 0);
        }
    }

    void modify(int x, int y, T val) {
        assert(x < n);
        assert(x >= 0);
        for (int i = x; i < n; i |= (i + 1))
            for (int j = lower_bound(yy[i].begin(), yy[i].end(), y) - begin(yy[i]); j < int(size(yy[i])); j |= (j + 1))
                t[i][j] += val;
    }

    T get(int x, int y) {
        T ans = 0;
        assert(x < n);
        for (int i = x; i > -1; i = ((i + 1) & i) - 1)
            for (int j = upper_bound(yy[i].begin(), yy[i].end(), y) - begin(yy[i]) - 1; j > -1; j = ((j + 1) & j) - 1)
                ans += t[i][j];
        return ans;
    }

    T get(int x1, int y1, int x2, int y2) {
        if (x1 > x2 || y1 > y2) return 0;
        return get(x2, y2) - get(x1 - 1, y2) - get(x2, y1 - 1) + get(x1 - 1, y1 - 1);
    }

};