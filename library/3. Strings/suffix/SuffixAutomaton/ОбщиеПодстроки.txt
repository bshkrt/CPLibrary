//#define _GLIBCXX_DEBUG

//#pragma GCC optimize("Ofast")
//#pragma GCC optimize("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>

using namespace std;

//randoms
//chrono::steady_clock::now().time_since_epoch().count()
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

#define ll long long
#define trace(x) cout << #x << " = " << (x) << endl;
#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define uniq(x) x.resize(unique(all(x)) -  begin(x))
#define ld long double
#define sz(s) (int) size(s)
#define pii pair<int, int>
#define mp(x, y) make_pair(x, y)
#define mt make_tuple
#define int128 __int128

template<typename T>
void ckmn(T &x, T y) { if (x > y) { x = y; }}

template<typename T>
void ckmx(T &x, T y) { if (x < y) { x = y; }}


int rand(int l, int r) { return (int) ((ll) rnd() % (r - l + 1)) + l; }

const ll infL = 1e18;
const int infI = 1e9 + 7;
const int N = (1 << 20);
const ll mod = 998244353;
const ld eps = 1e-9;


const int A = 26;


struct node {
    int nxt[A];
    int suf, prev, depth;

    node() {
        memset(nxt, -1, sizeof(nxt));
        suf = prev = -1;
        depth = 0;
    }
};

vector<node> t;
int ans[N], used[N], T = 1;

int add(int a, int x) {
    int b = size(t);
    t.emplace_back();
    t[b].prev = a, t[b].suf = 0;
    t[b].depth = t[a].depth + 1;
    int AA = a;
    for (; a != -1; a = t[a].suf) {
        if (t[a].nxt[x] == -1) {
            t[a].nxt[x] = b;
            continue;
        }
        int c = t[a].nxt[x];
        if (t[c].prev == a) {
            t[b].suf = c;
        } else {
            int d = size(t);
            t.emplace_back();
            t[d].suf = t[c].suf;
            t[c].suf = d;
            t[b].suf = d;
            t[d].prev = a;
            t[d].depth = t[a].depth + 1;
            ans[d] = ans[c];
            memcpy(t[d].nxt, t[c].nxt, sizeof(t[c].nxt));
            for (; a != -1 && t[a].nxt[x] == c; a = t[a].suf) {
                t[a].nxt[x] = d;
            }
        }
        break;
    }
    return t[AA].nxt[x];
}


void dfs(int v) {
    used[v] = T;
    ++ans[v];
    if (t[v].suf != -1 && used[t[v].suf] != T) dfs(t[v].suf);
    if (t[v].prev != -1 && used[t[v].prev] != T) dfs(t[v].prev);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int tt;
    cin >> tt;
    t = {{}};
    int v = 0;
    for (int i = 0; i < tt; ++i) {
        string s;
        cin >> s;
        v = 0;
        for (char c : s)
            v = add(v, c - 'a');
        ++T;
        dfs(v);
    }
    vector<int> an(tt + 2, -1);
    for (int i = 0; i < sz(t); ++i) {
        assert(ans[i] <= tt);
        ckmx(an[ans[i]], t[i].depth);
    }
    for (int i = tt - 1; i > -1; --i) ckmx(an[i], an[i + 1]);
    for (int i = 2; i <= tt; ++i)
        cout << an[i] << "\n";
    return 0;
}
